[tox]
envlist = py38,py39,py310,py311,py312,lint,type-check,docs
isolated_build = true
skip_missing_interpreters = true

[testenv]
deps = -r requirements-dev.txt
commands = pytest {posargs}

[testenv:lint]
deps = 
    black
    flake8
    isort
    ruff
commands = 
    black --check --diff .
    flake8 .
    isort --check-only --diff .
    ruff check .

[testenv:type-check]
deps = 
    mypy
    types-requests
    types-PyYAML
commands = 
    mypy upstream

[testenv:format]
deps = 
    black
    isort
commands = 
    black .
    isort .

[testenv:docs]
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
commands = 
    sphinx-build -b html docs docs/_build/html

[testenv:docs-serve]
deps = 
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
    sphinx-autobuild
commands = 
    sphinx-autobuild docs docs/_build/html

[testenv:security]
deps = 
    bandit
commands = 
    bandit -r upstream

[testenv:coverage]
deps = 
    -r requirements-dev.txt
commands = 
    pytest --cov=upstream --cov-report=term-missing --cov-report=html --cov-report=xml

[testenv:build]
deps = 
    build
    twine
commands = 
    python -m build
    twine check dist/*

[flake8]
max-line-length = 88
extend-ignore = E203,W503
exclude = 
    .git,
    __pycache__,
    docs/source/conf.py,
    old,
    build,
    dist,
    .tox,
    .eggs,
    *.egg

[coverage:run]
source = upstream
branch = true
omit = 
    */tests/*
    */examples/*
    */docs/*
    setup.py

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod